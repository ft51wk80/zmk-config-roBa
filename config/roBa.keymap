#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        ohnishi {
            bindings = <
&kp Q             &kp L             &kp U         &kp COMMA                    &kp PERIOD                                                      &kp F      &kp W  &kp R  &kp Y  &lt_to_layer_0 4 P
&kp E             &kp I             &kp A         &kp O                        &kp MINUS      &kp LS(LG(S))                    &kp ESCAPE      &kp K      &kp T  &kp N  &kp S  &kp H
&kp Z             &kp X             &kp C         &kp V                        &kp SEMICOLON  &kp TAB                          &kp LEFT_SHIFT  &kp G      &kp D  &kp M  &kp J  &kp B
&kp LEFT_COMMAND  &kp LEFT_CONTROL  &kp LEFT_ALT  &lt_to_layer_0 2 LANGUAGE_1  &lt 1 SPACE    &lt_to_layer_0 3 LANGUAGE_2      &kp BACKSPACE   &kp ENTER                       &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        NUM_FUNCTIONS {
            bindings = <
&none                       &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &none                    &none  &kp F9  &kp F10  &kp F11  &kp F12
&none                       &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &none  &none      &none  &none  &kp F5  &kp F6   &kp F7   &kp F8
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &none  &none      &none  &none  &kp F1  &kp F2   &kp F3   &kp F4
&none                       &none            &none            &none            &none  &none      &none  &none                            &none
            >;
        };

        SYMBOL {
            bindings = <
&none  &none  &none  &none  &none                    &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none      &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none      &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none      &none  &none                       &none
            >;
        };

        ARROW {
            bindings = <
&none             &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &none                      &none     &kp LC(LS(TAB))   &kp UP_ARROW  &kp LC(TAB)        &none
&kp HOME          &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &none      &none  &kp HOME  &kp LEFT          &kp DOWN      &kp RIGHT          &kp END
&kp LEFT_SHIFT    &kp LG(LS(LEFT_ARROW))  &none           &kp LG(LS(RIGHT_ARROW))  &none    &none      &none  &none     &kp LS(LG(LEFT))  &none         &kp LG(LS(RIGHT))  &kp LEFT_SHIFT
&kp LEFT_COMMAND  &none                   &none           &none                    &none    &none      &none  &none                                                        &kp LEFT_COMMAND
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        MOUSE {
            bindings = <
&none     &kp PAGE_UP    &none     &none  &none                    &none  &none  &none     &kp PAGE_UP    &none
&mkp MB2  &mkp MB3       &mkp MB1  &none  &none  &none      &none  &none  &none  &mkp MB1  &mkp MB3       &mkp MB2
&mkp MB5  &kp PAGE_DOWN  &mkp MB4  &none  &none  &none      &none  &none  &none  &mkp MB4  &kp PAGE_DOWN  &mkp MB5
&none     &none          &none     &none  &none  &none      &none  &none                                  &none
            >;
        };

        OPERATION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
